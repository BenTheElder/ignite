/*
	Note: This file is autogenerated! Do not edit it manually!
	Edit client_vm_template.go instead, and run
	hack/generate-client.sh afterwards.
*/

package client

import (
	api "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha1"
	meta "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1"
	"github.com/weaveworks/ignite/pkg/storage"
	"github.com/weaveworks/ignite/pkg/storage/filterer"
)

// VMClient is an interface for accessing VM-specific API objects
type VMClient interface {
	// Get returns an Object based on the given filter, filters can
	// match e.g. the Object's Name, UID or a specific property
	Get(filter filterer.BaseFilter) (*api.VM, error)
	// Set saves an Object into the persistent storage
	Set(*api.VM) error
	// Delete deletes an Object from the storage
	Delete(uid meta.UID) error
	// List returns a list of all Objects available
	List() ([]*api.VM, error)
}

// VMs returns the VMClient for the Client instance
func (c *Client) VMs() VMClient {
	if c.vmClient == nil {
		c.vmClient = newVMClient(c.storage)
	}

	return c.vmClient
}

// VMs is a shorthand for accessing VMs using the default client
func VMs() VMClient {
	return DefaultClient.VMs()
}

// vmClient is a struct implementing the VMClient interface
// It uses a shared storage instance passed from the Client together with its own Filterer
type vmClient struct {
	storage  storage.Storage
	filterer *filterer.Filterer
}

// newVMClient builds the vmClient struct using the storage implementation and a new Filterer
func newVMClient(s storage.Storage) VMClient {
	return &vmClient{
		storage:  s,
		filterer: filterer.NewFilterer(s),
	}
}

// Get returns a single VM based on a given Filter
func (c *vmClient) Get(filter filterer.BaseFilter) (vm *api.VM, err error) {
	object, err := c.filterer.Find(api.VMKind, filter)
	vm = object.(*api.VM)
	return
}

// Set saves the given VM into the persistent storage
func (c *vmClient) Set(vm *api.VM) error {
	return c.storage.Set(vm)
}

// Delete deletes the VM from the storage
func (c *vmClient) Delete(uid meta.UID) error {
	return c.storage.Delete(meta.KindVM, uid)
}

// List returns a list of all VMs available
func (c *vmClient) List() ([]*api.VM, error) {
	list, err := c.storage.List(meta.KindVM)
	if err != nil {
		return nil, err
	}

	result := make([]*api.VM, 0, len(list))
	for _, item := range list {
		result = append(result, item.(*api.VM))
	}

	return result, nil
}
