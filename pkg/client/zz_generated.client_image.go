/*
	Note: This file is autogenerated! Do not edit it manually!
	Edit client_image_template.go instead, and run
	hack/generate-client.sh afterwards.
*/

package client

import (
	api "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha1"
	meta "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1"
	"github.com/weaveworks/ignite/pkg/storage"
	"github.com/weaveworks/ignite/pkg/storage/filterer"
)

// ImageClient is an interface for accessing Image-specific API objects
type ImageClient interface {
	// Get returns an Object based on the given filter, filters can
	// match e.g. the Object's Name, UID or a specific property
	Get(filter filterer.BaseFilter) (*api.Image, error)
	// Set saves an Object into the persistent storage
	Set(*api.Image) error
	// Delete deletes an Object from the storage
	Delete(uid meta.UID) error
	// List returns a list of all Objects available
	List() ([]*api.Image, error)
}

// Images returns the ImageClient for the Client instance
func (c *Client) Images() ImageClient {
	if c.imageClient == nil {
		c.imageClient = newImageClient(c.storage)
	}

	return c.imageClient
}

// Images is a shorthand for accessing Images using the default client
func Images() ImageClient {
	return DefaultClient.Images()
}

// imageClient is a struct implementing the ImageClient interface
// It uses a shared storage instance passed from the Client together with its own Filterer
type imageClient struct {
	storage  storage.Storage
	filterer *filterer.Filterer
}

// newImageClient builds the imageClient struct using the storage implementation and a new Filterer
func newImageClient(s storage.Storage) ImageClient {
	return &imageClient{
		storage:  s,
		filterer: filterer.NewFilterer(s),
	}
}

// Get returns a single Image based on a given Filter
func (c *imageClient) Get(filter filterer.BaseFilter) (image *api.Image, err error) {
	object, err := c.filterer.Find(api.ImageKind, filter)
	image = object.(*api.Image)
	return
}

// Set saves the given Image into the persistent storage
func (c *imageClient) Set(image *api.Image) error {
	return c.storage.Set(image)
}

// Delete deletes the Image from the storage
func (c *imageClient) Delete(uid meta.UID) error {
	return c.storage.Delete(meta.KindImage, uid)
}

// List returns a list of all Images available
func (c *imageClient) List() ([]*api.Image, error) {
	list, err := c.storage.List(meta.KindImage)
	if err != nil {
		return nil, err
	}

	result := make([]*api.Image, 0, len(list))
	for _, item := range list {
		result = append(result, item.(*api.Image))
	}

	return result, nil
}
