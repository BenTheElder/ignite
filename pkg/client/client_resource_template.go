// +build ignore

/*
	Note: This file is autogenerated! Do not edit it manually!
	Edit client_resource_template.go instead, and run
	hack/generate-client.sh afterwards.
*/

package client

import (
	api "github.com/weaveworks/ignite/pkg/apis/ignite/v1alpha1"
	meta "github.com/weaveworks/ignite/pkg/apis/meta/v1alpha1"
	"github.com/weaveworks/ignite/pkg/storage"
	"github.com/weaveworks/ignite/pkg/storage/filterer"
)

// ResourceClient is an interface for accessing Resource-specific API objects
type ResourceClient interface {
	// Get returns an Object based on the given filter, filters can
	// match e.g. the Object's Name, UID or a specific property
	Get(filter filterer.BaseFilter) (*api.Resource, error)
	// Set saves an Object into the persistent storage
	Set(*api.Resource) error
	// Delete deletes an Object from the storage
	Delete(uid meta.UID) error
	// List returns a list of all Objects available
	List() ([]*api.Resource, error)
}

// Resources returns the ResourceClient for the Client instance
func (c *Client) Resources() ResourceClient {
	if c.resourceClient == nil {
		c.resourceClient = newResourceClient(c.storage)
	}

	return c.resourceClient
}

// Resources is a shorthand for accessing Resources using the default client
func Resources() ResourceClient {
	return DefaultClient.Resources()
}

// resourceClient is a struct implementing the ResourceClient interface
// It uses a shared storage instance passed from the Client together with its own Filterer
type resourceClient struct {
	storage  storage.Storage
	filterer *filterer.Filterer
}

// newResourceClient builds the resourceClient struct using the storage implementation and a new Filterer
func newResourceClient(s storage.Storage) ResourceClient {
	return &resourceClient{
		storage:  s,
		filterer: filterer.NewFilterer(s),
	}
}

// Get returns a single Resource based on a given Filter
func (c *resourceClient) Get(filter filterer.BaseFilter) (resource *api.Resource, err error) {
	object, err := c.filterer.Find(api.ResourceKind, filter)
	resource = object.(*api.Resource)
	return
}

// Set saves the given Resource into the persistent storage
func (c *resourceClient) Set(resource *api.Resource) error {
	return c.storage.Set(resource)
}

// Delete deletes the Resource from the storage
func (c *resourceClient) Delete(uid meta.UID) error {
	return c.storage.Delete(meta.KindResource, uid)
}

// List returns a list of all Resources available
func (c *resourceClient) List() ([]*api.Resource, error) {
	list, err := c.storage.List(meta.KindResource)
	if err != nil {
		return nil, err
	}

	result := make([]*api.Resource, 0, len(list))
	for _, item := range list {
		result = append(result, item.(*api.Resource))
	}

	return result, nil
}
